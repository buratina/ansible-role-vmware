---

- name: clone template and customize
  vmware_guest:
    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
    validate_certs: no
    datacenter: "{{ providers.vcenter.datacenter }}"
    cluster: "{{ providers.vcenter.cluster }}"
    resource_pool: "{{ providers.vcenter.resource_pool|default('') }}"
    folder: "{{ providers.vcenter.folder|default('') }}"
    name: "{{ item.name }}"
    template: "{{ item.template }}"
    snapshot_src: "{{ item.snapshot_src|default(omit) }}"
    linked_clone: "{{ item.linked_clone|default(omit) }}"
    customvalues: "{{ item.customvalues|default(omit) }}"
    state: poweredon
    wait_for_ip_address: yes
    disk: "{{ item.disk|default(omit) }}"
    hardware:
      memory_mb: "{{ item.memory }}"
      num_cpus: "{{ item.cpu }}"
      scsi: paravirtual
    networks: "{{ item.networks }}"
    customization: "{{ item.customization|default(omit) }}"
  async: 7200
  poll: 0
  register: deploy
  loop: "{{ nodes }}"
  when: nodes is defined

- name: wait for instance creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: instances
  until: instances.finished
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  loop: "{{ deploy.results }}"

#- name: gather category id from given tag category
#  vmware_category_facts:
#    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
#    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
#    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
#  register: tag_category_results
#  ignore_errors: yes
#
#- name: set category id for app
#  set_fact:
#    app_tag_category_id: "{{ item.category_id }}"
#  with_items: "{{ tag_category_results.tag_category_facts|json_query(query) }}"
#  vars:
#    query: "[?category_name==`app`]"
#
#- debug:
#    var: app_tag_category_id
#
#- name: set category id for app
#  set_fact:
#    role_tag_category_id: "{{ item.category_id }}"
#  with_items: "{{ tag_category_results.tag_category_facts|json_query(query) }}"
#  vars:
#    query: "[?category_name==`role`]"
#
#- debug:
#    var: role_tag_category_id
#
#- name: assign app tags
#  vmware_tag:
#    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
#    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
#    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
#    validate_certs: no
#    category_id: "{{ app_tag_category_id }}"
#    tag_name: "{{ item.app_name }}"
#    tag_description: "{{ item.app_name }}"
#    state: present
#  loop: "{{ nodes }}"
#  when: item.app_name is defined
#  ignore_errors: yes
#
#- name: assign role tags
#  vmware_tag:
#    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
#    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
#    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
#    validate_certs: no
#    category_id: "{{ role_tag_category_id }}"
#    tag_name: "{{ item.role }}"
#    tag_description: "{{ item.role }}"
#    state: present
#  loop: "{{ nodes }}"
#  when: item.role is defined
#  ignore_errors: yes

- debug:
    var: item.item.item.networks[0].ip | default(item.instance.ipv4)
  loop: "{{ instances.results }}"

- name: waiting for servers to come online
  wait_for:
    host: "{{ item.item.item.networks[0].ip | default(item.instance.ipv4) }}"
    port: "{{ ansible_port }}"
    timeout: "{{ instance_wait_connection_timeout }}"
  loop: "{{ instances.results }}"
  when:
    - instances is changed
    - item.instance is defined
  ignore_errors: yes