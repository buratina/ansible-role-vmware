---

- name: fail if no template and disk specified
  fail:
    msg: "at least one disk must be specified when no template is used"
  when:
    - item.template is undefined
    - item.disk[0].size_gb is undefined | default(False)

- name: fail if both template and iso is specified
  fail:
    msg: "template and cdrom are mutually exclusive, only define one of them"
  when:
    - item.template is defined
    - item.cdrom is defined

- name: fail with message
  fail:
    msg: "template ({{ item.template }}) could not be found, make sure it exists"
  when:
    - template_facts is success
    - template_facts.virtual_machines is defined
    - item.template is defined
    - template_facts.virtual_machines[item.template] is undefined

- block:
    - name: check iso file on data domain
      vsphere_file:
        hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
        username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
        password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
        validate_certs: no
        datacenter: "{{ providers.vcenter.datacenter | default('datastore1') }}"
        datastore: "{{ providers.vcenter.datastore | default('datastore1') }}"
        path: "{{ datastore_iso_folder }}"
        state: touch
      register: vmware_disk_main_iso
      failed_when: no

    - debug:
        msg: "{{ vmware_disk_main_iso }}"

    - name: fail with message
      fail:
        msg: "iso file ({{ item.cdrom }}) could not be found on datastore ({{ providers.vcenter.datastore | default('datastore1') }})"
      when: vmware_disk_main_iso is undefined
  when: item.cdrom is defined

- name: set iso file
  set_fact:
    node_iso_file: '{{ node_iso_file | default({}) | combine({item.name: item.cdrom | default(None)}) }}'
  when: (node_iso_file[item.name] | default(None)) is undefined

- name: set os type
  set_fact:
    nodes_os_type: '{{ nodes_os_type | default({}) | combine({item.name: item.os_type | default(None)}) }}'

- name: ensure ansible_port variable is defined per node (windows)
  set_fact:
    windows_nodes: "{{ windows_nodes|default([]) + [item | combine({'ansible_port': 5986})] }}"
  when:
    - item.template is defined
    - item.ansible_port is not defined
    - (template_facts.virtual_machines[item.template].guest_fullname | default(None)) is defined
    - "'windows' in template_facts.virtual_machines[item.template].guest_fullname | lower | default('')"

- name: ensure ansible_port variable is defined per node (linux)
  set_fact:
    linux_nodes: "{{ linux_nodes|default([]) + [item | combine({'ansible_port': 22})] }}"
  when:
    - item.template is defined
    - item.ansible_port is not defined
    - (template_facts.virtual_machines[item.template].guest_fullname | default(None)) is defined
    - "'windows' not in template_facts.virtual_machines[item.template].guest_fullname | lower | default('')"

- name: check if any existing nodes with ansible_port defined
  set_fact:
    existing_nodes: "{{ existing_nodes|default([]) + [item] }}"
  when:
    - item.ansible_port is defined or item.template is undefined or (template_facts.virtual_machines[item.template].guest_fullname | default(None)) is undefined