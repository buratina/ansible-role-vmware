---
- name: clone template and customize
  vmware_guest:
    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
    validate_certs: no
    datacenter: "{{ providers.vcenter.datacenter }}"
    cluster: "{{ providers.vcenter.cluster }}"
    resource_pool: "{{ providers.vcenter.resource_pool|default('') }}"
    folder: "{{ providers.vcenter.folder|default('') }}"
    name: "{{ item.name }}"
    template: "{{ item.template }}"
    snapshot_src: "{{ item.snapshot_src|default(omit) }}"
    linked_clone: "{{ item.linked_clone|default(omit) }}"
    customvalues: "{{ item.customvalues|default(omit) }}"
    state: poweredon
    wait_for_ip_address: yes
    disk: "{{ item.disk|default(omit) }}"
    hardware:
      memory_mb: "{{ item.memory }}"
      num_cpus: "{{ item.cpu }}"
      scsi: paravirtual
    networks: "{{ item.networks }}"
    customization: "{{ item.customization|default(omit) }}"
  async: 7200
  poll: 0
  register: deploy
  with_items: "{{ nodes }}"
  when: nodes is defined

- name: wait for instance creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: instances
  until: instances.finished
  retries: "{{ instance_wait_retry_limit }}"
  delay: 10
  with_items: "{{ deploy.results }}"

- debug:
    var: item.instance
  with_items: "{{ instances.results }}"

- name: waiting for servers to come online
  wait_for:
    host: "{{ item.instance.ipv4 }}"
    port: "{{ ansible_port }}"
    timeout: "{{ instance_wait_connection_timeout }}"
  with_items: "{{ instances.results }}"
  when: (instances | changed) and (item.instance is defined)
  ignore_errors: yes

- pause:
    seconds: 30

- name: gather facts from vcenter
  vmware_guest_facts:
    hostname: "{{ lookup('env', 'VMWARE_HOST')|default(providers.vcenter.hostname) }}"
    username: "{{ lookup('env', 'VMWARE_USER')|default(providers.vcenter.username) }}"
    password: "{{ lookup('env', 'VMWARE_PASSWORD')|default(providers.vcenter.password) }}"
    datacenter: "{{ providers.vcenter.datacenter }}"
    validate_certs: no
    name: "{{ item.instance.hw_name }}"
  register: instance_facts
  with_items: "{{ instances.results }}"

- debug:
    var: item.instance
  with_items: "{{ instance_facts.results }}"